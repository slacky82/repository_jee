package it.acme.nerdlittleproject;

import it.acme.nerdlittleproject.connections.Connection;
import it.acme.nerdlittleproject.connections.MainRoad;
import it.acme.nerdlittleproject.connections.Motorway;
import it.acme.nerdlittleproject.exception.InvalidItinerary;
import it.acme.nerdlittleproject.itineraries.EmptyItinerary;
import it.acme.nerdlittleproject.itineraries.Itinerary;

public class Mappy {
	
	private static EmptyItinerary myItinerary;

	public static void main(String[] args) {
		// TODO all interaction with user
		myItinerary = Itinerary.makeEmpty();
		
		Connection myConn1 = new MainRoad();
		myConn1.setFrom("pescara");
		myConn1.setTo("l'aquila");
		myConn1.setKm(100);
		myConn1.setTime(60);
		
		Motorway myConn2 = new Motorway();
		myConn2.setFrom("l'aquila");
		myConn2.setTo("roma");
		myConn2.setKm(100);
		myConn2.setTime(60);
		myConn2.setPrice(new Float("12.50"));
		
		Connection myConn3 = new MainRoad();
		myConn3.setFrom("roma");
		myConn3.setTo("pescara");
		myConn3.setKm(100);
		myConn3.setTime(60);
		
		try{
			add(myConn1);
			add(myConn2);
			add(myConn3);
			
			System.out.println(myItinerary.getTime());
			System.out.println(myItinerary.getKilometer());
			System.out.println(myItinerary.getPrice());
			
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
	
	
	
	
	public static void add(Connection c) throws InvalidItinerary {
		//TODO metodo add che prende una nuova connessione e restituisce void, 
		//in modo tale che la nuova connessione può essere utilizzata per costruire itinerari. 
		//Se una connessione dello stesso tipo fra le stesse città esiste già, 
		//l'aggiunta corrisponde ad un aggiornamento, 
		//ovvero la nuova connessione sostituisce la precedente.
		
		//myItinerary.get
		
		myItinerary.add(c);
	}
	
	public Itinerary getItinerary(String cityFrom, String cityTo){
		//TODO un metodo getItinerary che è un overloading del metodo precedente 
		//che prende solamente le due città. 
		//In tal caso restituisce qualsiasi itinerario che connetta le due città. 
		//Se tale itinerario non esiste solleva un'eccezione NoSuchItinerary.
		return null;
	}


}
